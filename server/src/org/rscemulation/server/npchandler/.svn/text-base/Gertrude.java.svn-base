/**
* Generated By NPCScript :: A scripting engine created for RSCEmulation by Zilent
*/
package org.rscemulation.server.npchandler;

import org.rscemulation.server.event.SingleEvent;
import org.rscemulation.server.model.Npc;
import org.rscemulation.server.model.ChatMessage;
import org.rscemulation.server.model.MenuHandler;
import org.rscemulation.server.model.World;
import org.rscemulation.server.event.DelayedQuestChat;
import org.rscemulation.server.model.Player;
import org.rscemulation.server.npchandler.NpcHandler;
public class Gertrude implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		final String[] messages110 = {"Hello, are you ok?"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages110, true) {
			public void finished() {
				final String[] messages111 = {"Do I look ok? ..those kids drive me crazy", "...I'm sorry, it's just, i've lost her"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages111) {
					public void finished() {
						final String[] messages112 = {"Lost who?"};
						World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages112) {
							public void finished() {
								final String[] messages113 = {"fluffs, poor fluffs, she never hurt anyone"};
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages113) {
									public void finished() {
										final String[] messages114 = {"who's fluffs?"};
										World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages114) {
											public void finished() {
												final String[] messages115 = {"My beloved feline friend fluffs"};
												World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages115) {
													public void finished() {
														final String[] messages116 = {"She's been purring by my side for almost a decade", "please could you go search for her...", "....while I look over the kids?"};
														World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages116) {
															public void finished() {
																World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
																	public void action() {
																		final String[] options20 = {"Well, I suppose I could", "What's in it for me?", "Sorry, i'm too busy to play pet rescue"};
																		owner.setBusy(false);
																		owner.getActionSender().sendMenu(options20);
																		owner.setMenuHandler(new MenuHandler(options20) {
																			public void handleReply(final int option, final String reply) {
																				owner.setBusy(true);
																				for(Player informee : owner.getViewArea().getPlayersInView()) {
																					informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																				}
																				switch(option) {
																					case 0:
																						help(npc, owner);
																						break;
																					case 1:
																						final String[] messages117 = {"I'm sorry, I'm too poor to pay you anything", "The best I could offer is a warm meal", "so, can you help?"};
																						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages117) {
																							public void finished() {
																								World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
																									public void action() {
																										final String[] options21 = {"Well, I suppose I could", "sorry, i'm too busy to play pet rescue"};
																										owner.setBusy(false);
																										owner.getActionSender().sendMenu(options21);
																										owner.setMenuHandler(new MenuHandler(options21) {
																											public void handleReply(final int option, final String reply) {
																												owner.setBusy(true);
																												for(Player informee : owner.getViewArea().getPlayersInView()) {
																													informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
																												}
																												switch(option) {
																													case 0:
																														help(npc, owner);
																														break;
																													case 1:
																														tooBusy(npc, owner);
																														break;
																												}
																											}
																										});
																									}
																								});
																							}
																						});
																						break;
																					case 2:
																						owner.setBusy(false);
																						npc.unblock();
																						tooBusy(npc, owner);
																						break;
																				}
																			}
																		});
																	}
																});
															}
														});
													}
												});
											}
										});
									}
								});
							}
						});
					}
				});
			}
		});
	}
	private void help(final Npc npc, final Player owner) {
		final String[] messages118 = {"Really? thank you so much", "I really have no idea where she could be", "I think my sons, Shilop and Wilough, saw the cat last", "they'll be out in the market place"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages118) {
			public void finished() {
				final String[] messages119 = {"Alright then, i'll see what I can do"};
				World.getDelayedEventHandler().add(new DelayedQuestChat(owner, npc, messages119) {
					public void finished() {
						owner.setBusy(false);
						npc.unblock();
					}
				});
			}
		});
	}
	private void tooBusy(final Npc npc, final Player owner) {
		final String[] messages120 = {"well, ok then, i'll have to find someone else"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages120) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}