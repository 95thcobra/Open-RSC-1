/**
* Generated By NPCScript :: A scripting engine created for RSCEmulation by Zilent
*/
package org.rscemulation.server.npchandler;

import org.rscemulation.server.Server;
import org.rscemulation.server.event.SingleEvent;
import org.rscemulation.server.logging.SQLogger;
import org.rscemulation.server.logging.model.ErrorLog;
import org.rscemulation.server.model.Npc;
import org.rscemulation.server.model.ChatMessage;
import org.rscemulation.server.model.MenuHandler;
import org.rscemulation.server.model.Save;
import org.rscemulation.server.model.World;
import org.rscemulation.server.event.DelayedQuestChat;
import org.rscemulation.server.model.Player;
import org.rscemulation.server.model.InvItem;
import org.rscemulation.server.model.MiscQueryRequest;
import org.rscemulation.server.util.Config;
import org.rscemulation.server.util.Formulae;
import org.rscemulation.server.net.DatabaseConnection;
import org.rscemulation.server.npchandler.NpcHandler;
import org.rscemulation.server.util.DataConversions;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class Subscription_Vendor implements NpcHandler {
	
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		if(!owner.isPMod()) {
			npc.blockedBy(owner);
			owner.setBusy(true);
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hello, how can I help you?"}, true) {
				public void finished() {
					World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
						public void action() {
							owner.setBusy(false);
							owner.getActionSender().sendMenu(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?", "I've just purchased a Subscription Card, can I have it please?"});
							owner.setMenuHandler(new MenuHandler(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?", "I've just purchased a Subscription Card, can I have it please?"}) {
								public void handleReply(final int option, final String reply) {
									owner.setBusy(true);
									for(Player informee : owner.getViewArea().getPlayersInView()) {
										informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
									}
									switch(option) {
										case 0:
											canIRedeem(npc, owner);
											break;
										case 1:
											thisWork(npc, owner);
											break;
										case 2:
											doIGet(npc, owner);
											break;
										case 3:
											redeemFurther(npc, owner);
											break;
										case 4:
											lowerStat(npc, owner);
											break;
										case 5:
											checkCard(npc, owner);
									}
								}
							});
						}
					});
				}
			});
		} else {
			owner.getActionSender().sendMessage("@gre@RSCE:@whi@ Staff cannot submit subscription cards.");
		}
	}
	
	private final void checkCard(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Let me check..."}) {
			public void finished() {
				int cardAvailable = 0;
				try {
					DatabaseConnection connection = new DatabaseConnection(Config.DB_HOST, Config.DB_NAME, Config.DB_LOGIN, Config.DB_PASS);
					ResultSet result = connection.getQuery("SELECT `sub_due` FROM `users` WHERE `id` = '" + owner.getOwner() + "'");
					if(result.next()) {
						cardAvailable = result.getInt("sub_due");
					} else {
						throw new SQLException("Unable to read `sub_due` from `users`");
					}
					connection.close();
					if(cardAvailable <= 30) {
						if(cardAvailable > 0) {
							ownerHasSubCard(npc, owner, cardAvailable);
						} else {
							noSubCard(npc, owner);
						}
					} else {
						tooManyCards(npc, owner);
					}
				} catch(SQLException exception) {
					System.out.println(exception);
					exception.printStackTrace();
					errorCheckingCard(npc, owner);
				}
			}
		});
	}
	
	private final void noSubCard(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hm, it appears that you don't have any Subscription Cards due", "If you just purchased them it can take up to 15 minutes", "Check back soon and if they still haven't arrived contact a staff member"}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void ownerHasSubCard(final Npc npc, final Player owner, final int cardsDue) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You have " + cardsDue + " subscription card(s) ready for you..."}) {
			public void finished() {
				if(owner.getInventory().canHold(cardsDue)) {
					owner.getActionSender().sendMessage("The Subscription Vendor hands you " + cardsDue + " Subscription Card(s)");
					for(int card = 0; card < cardsDue; card++) {
						owner.getInventory().add(new InvItem(1295, 1));
					}
					owner.getActionSender().sendInventory();
					Server.requestDBTransactionAccess().addTransaction(new Save(owner));
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"There you go"}) {
						public void finished() {
							try {
								DatabaseConnection connection = new DatabaseConnection(Config.DB_HOST, Config.DB_NAME, Config.DB_LOGIN, Config.DB_PASS);
								connection.updateQuery("UPDATE `users` SET `sub_due` = '0', `sub_given` = UNIX_TIMESTAMP() WHERE `id` = '" + owner.getOwner() + "'");
								connection.close();
							} catch(SQLException ex) {
								SQLogger.log(new ErrorLog(owner.getUsernameHash(), owner.getCurrentIP(), System.currentTimeMillis() / 1000, "!!!!!!! ERROR UPDATING CARDS DUE FOR PLAYER"));
								owner.setBusy(false);
								npc.unblock();
							}
							owner.setBusy(false);
							npc.unblock();
						}
					});
				} else {
					World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Ah, you don't have enough room to hold them", "Come back when you have " + cardsDue + " free inventory space(s)"}) {
						public void finished() {
							owner.setBusy(false);
							npc.unblock();
						}
					});
				}
			}
		});
	}
	
	private final void tooManyCards(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"I see you have bought more cards than your inventory can hold", "Please contact a staff member to manually recieve your Subscription Cards."}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void errorCheckingCard(final Npc npc, final Player owner) {
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"There seems to have been an error checking your card status", "Please contact a staff member for support."}) {
			public void finished() {
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private final void lowerStat(final Npc npc, final Player owner) {
		if(!owner.getInventory().contains(new InvItem(1295, 1))) {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You don't have a subscription card in your inventory", "You must either purchase one from the website", "Or buy one off another player.", "Come back when you're ready to redeem a subscription card"}) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});
		} else {
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Sure, I can reset stats to 0 experience", "as long as they're level 30 or under.", "Pick the stat you would like me to reset..."}) {
				public void finished() {
					ArrayList<String> statsToReset = new ArrayList<String>();
					for(int i = 0; i < 7; i++) {
						if(owner.getMaxStat(i) > 1 && owner.getMaxStat(i) < 31 && i != 3) {
							statsToReset.add(DataConversions.capitalizeFirstLetters(Formulae.statArray[i]));
						}
					}
					if(statsToReset.size() == 0) {
						World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Hm, it seems you don't have any stats low enough to be reset...", "To reset a combat stat it must be level 30 or under"}) {
							public void finished() {
								owner.setBusy(false);
								npc.unblock();
							}
						});
					} else {
						String[] statOptions = new String[statsToReset.size()];
						statOptions = statsToReset.toArray(statOptions);
						owner.setBusy(false);
						owner.getActionSender().sendMenu(statsToReset.toArray(statOptions));
						owner.setMenuHandler(new MenuHandler(statsToReset.toArray(statOptions)) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Alright, this will use your subscription card and reset your " + reply, "are you sure?"}) {
									public void finished() {
										owner.setBusy(false);
										owner.getActionSender().sendMenu(new String[] {"Yes, please reset my " + reply, "Ah, I'll go away and have a think about it"});
										owner.setMenuHandler(new MenuHandler(new String[] {"Yes, please reset my " + reply, "Ah, I'll go away and have a think about it"}) {
											public void handleReply(final int option2, final String reply2) {
												owner.setBusy(true);
												for(Player informee : owner.getViewArea().getPlayersInView()) {
													informee.informOfChatMessage(new ChatMessage(owner, reply2, npc));
												}
												switch(option2) {
													case 0:
														World.getDelayedEventHandler().add(new SingleEvent(owner, 1000) {
															public void action() {
																owner.getActionSender().sendMessage("The Subscription Vendor takes your Subscription Card");
																owner.getInventory().remove(1295, 1);
																owner.getActionSender().sendInventory();	
																World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"There you go, your " + reply + " has been reset", "Thank you for helping keep RSCEmulation alive"}) {
																	public void finished() {
																		owner.setExp(Formulae.getStat(reply), 0);
																		System.out.println(Formulae.getStat(reply));
																		owner.setCurStat(Formulae.getStat(reply),1);
																		owner.setMaxStat(Formulae.getStat(reply),1);
																		int totExp = owner.getExp(0) + owner.getExp(1) + owner.getExp(2);
																		int hpExp = (totExp / 3) + 1154;
																		owner.setExp(3, hpExp);
																		owner.setCurStat(3, Formulae.experienceToLevel(hpExp));
																		owner.setMaxStat(3, Formulae.experienceToLevel(hpExp));
																		owner.setCombatLevel(Formulae.getCombatlevel(owner.getMaxStats()));
																		owner.getActionSender().sendStats();
																		for(InvItem item : owner.getInventory().getItems()) {
																			if (item.isWielded()) {
																				item.setWield(false);
																				owner.updateWornItems(item.getWieldableDef().getWieldPos(), owner.getPlayerAppearance().getSprite(item.getWieldableDef().getWieldPos()));
																			}
																		}
																		owner.getActionSender().sendInventory();
																		owner.getActionSender().sendEquipmentStats();
																		owner.setBusy(false);
																		npc.unblock();
																	}
																});
															}
														});
													case 1:
														owner.setBusy(false);
														npc.unblock();
												}
											}
										});
									}
								});
							}
						});
					}
				}
			});
		}
	}
	
	private void canIRedeem(final Npc npc, final Player owner) {
		if(!owner.getInventory().contains(new InvItem(1295, 1))) {
			final String[] messages1 = {"You don't have a subscription card in your inventory", "You must either purchase one from the website", "Or buy one off another player.", "Come back when you're ready to redeem a subscription card"};
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages1) {
				public void finished() {
					owner.setBusy(false);
					npc.unblock();
				}
			});
		} else {
			final String[] messages2 = {"Of course!"};
			World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages2) {
				public void finished() {
					World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
						public void action() {
							owner.getActionSender().sendMessage("The Subscription Vendor takes your Subscription Card");
							owner.getInventory().remove(1295, 1);
							owner.getActionSender().sendInventory();										
							final String[] messages3 = {"You will now be subscribed."};
							World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages3) {
								public void finished() {
									World.getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
										public void action() {
											if(owner.getSubscriptionExpires() > 0) {
												owner.setSubscriptionExpires(2592000 + owner.getSubscriptionExpires());
											} else {
												owner.setSubscriptionExpires((System.currentTimeMillis() / 1000) + 2592000);
											}
											owner.getActionSender().sendAlert("Thank you for subscribing to RSCEmulation!  Without subscribers we simply wouldn't be able to keep RSCEmulation up and running.  You have " + owner.getDaysSubscriptionLeft() + " days remaining.", false);
											Server.requestDBTransactionAccess().addTransaction(new MiscQueryRequest("UPDATE `users` SET `group_id` = CASE WHEN `group_id` = '4' THEN '11' ELSE `group_id` END,  `sub_expires` = CASE WHEN `sub_expires` >= UNIX_TIMESTAMP() THEN `sub_expires` + 2592000 ELSE UNIX_TIMESTAMP() + 2592000 END WHERE `id` = " + owner.getOwner()));
											owner.getActionSender().updateGroupID((byte)7);
											owner.setBusy(false);
											npc.unblock();											
										}
									});
								}
							});
						}
					});
				}
			});
		}
	}
	
	private void thisWork(final Npc npc, final Player owner) {
		final String[] messages4 = {"Players can purchase a subscription card from the website", "They can then either redeem it or sell it to make some money", "This makes it easy for players to buy and sell subscription cards"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages4) {
			public void finished() {
				owner.setBusy(false);
				owner.getActionSender().sendMenu(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"});
				owner.setMenuHandler(new MenuHandler(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"}) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								canIRedeem(npc, owner);
								break;
							case 1:
								thisWork(npc, owner);
								break;
							case 2:
								doIGet(npc, owner);
								break;
							case 3:
								redeemFurther(npc, owner);
								break;
							case 4:
								lowerStat(npc, owner);
								break;
						}
					}
				});
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void doIGet(final Npc npc, final Player owner) {
		final String[] messages5 = {"Many things such as faster xp, a bigger client, slower fatigue, etc", "For a full list check out the subscription page on the website", "Most importantly though, you help keep rscemulation alive!"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages5) {
			public void finished() {
				owner.setBusy(false);
				owner.getActionSender().sendMenu(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"});
				owner.setMenuHandler(new MenuHandler(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"}) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								canIRedeem(npc, owner);
								break;
							case 1:
								thisWork(npc, owner);
								break;
							case 2:
								doIGet(npc, owner);
								break;
							case 3:
								redeemFurther(npc, owner);
								break;
							case 4:
								lowerStat(npc, owner);
								break;
						}
					}
				});
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
	
	private void redeemFurther(final Npc npc, final Player owner) {
		final String[] messages6 = {"Yep, you most certainly can!", "It will simply add a further 30 days on to your current subscription"};
		World.getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, messages6) {
			public void finished() {
				owner.setBusy(false);
				owner.getActionSender().sendMenu(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"});
				owner.setMenuHandler(new MenuHandler(new String[] {"Can I redeem my subscription card please?", "How does this work?", "What do I get for subscribing?", "Can I redeem a further subscription if I'm already subscribed?", "Can I use my subscription card to reset a stat to 1?"}) {
					public void handleReply(final int option, final String reply) {
						owner.setBusy(true);
						for(Player informee : owner.getViewArea().getPlayersInView()) {
							informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
						}
						switch(option) {
							case 0:
								canIRedeem(npc, owner);
								break;
							case 1:
								thisWork(npc, owner);
								break;
							case 2:
								doIGet(npc, owner);
								break;
							case 3:
								redeemFurther(npc, owner);
								break;
							case 4:
								lowerStat(npc, owner);
								break;
						}
					}
				});
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}

}