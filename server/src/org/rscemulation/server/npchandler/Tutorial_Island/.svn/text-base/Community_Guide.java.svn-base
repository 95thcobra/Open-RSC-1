/**
* Generated By NPCScript :: A scripting engine created for RSCEmulation by Zilent
*/
package org.rscemulation.server.npchandler.Tutorial_Island;
import org.rscemulation.server.event.DelayedQuestChat;
import org.rscemulation.server.event.SingleEvent;
import org.rscemulation.server.model.ChatMessage;
import org.rscemulation.server.model.MenuHandler;
import org.rscemulation.server.model.Npc;
import org.rscemulation.server.model.Player;
import org.rscemulation.server.model.Quest;
import org.rscemulation.server.model.World;
import org.rscemulation.server.npchandler.NpcHandler;
public class Community_Guide implements NpcHandler {
	public void handleNpc(final Npc npc, final Player owner) throws Exception {
		npc.blockedBy(owner);
		owner.setBusy(true);
		Quest q = owner.getQuest(100);
		if(q != null) {
			switch(q.getStage()) {
				case 23:
					communityChat(npc, owner, true);
					break;
				default:
					communityChat(npc, owner, false);
			}
		}
	}
	
	private void communityChat(final Npc npc, final Player owner, final boolean incStage) {
		ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"You're almost ready to go out into the main game area", "When you get out there", "you will be able to interact with thousands of other players"}, true) {
			public void finished() {
				ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options12 = {"How can I communicate with other players?", "Are there rules on ingame behavior?"};
						owner.setBusy(false);
						owner.getActionSender().sendMenu(options12);
						owner.setMenuHandler(new MenuHandler(options12) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										howCommunicate(npc, owner, incStage);
										break;
									case 1:
										behavior(npc, owner, incStage);
										break;
								}
							}
						});
					}
				});
			}
		});
	}
	private void howCommunicate(final Npc npc, final Player owner, final boolean incStage) {
		ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Typing in the game window will bring up chat", "Which players in the nearby area will be able to see", "If you want to speak to a particular friend anywhere in the game", "you will be able to select the smiley face icon", "then click to add a friend, and type in your friend's name", "If that player is logged in on the same word as you", "their name will go green", "If they are logged in on a different world their name will go yellow", "clicking on their name will allow you to send a message"}) {
			public void finished() {
				ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options13 = {"Are there rules on ingame behaviour?", "goodbye then"};
						owner.setBusy(false);
						owner.getActionSender().sendMenu(options13);
						owner.setMenuHandler(new MenuHandler(options13) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										behavior(npc, owner, incStage);
										break;
									case 1:
										goodbye(npc, owner, incStage);
										break;
								}
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	private void behavior(final Npc npc, final Player owner, final boolean incStage) {
		ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Yes you should read the rules of conduct on our front page", "to make sure you do nothing to get yourself banned", "but as general guide always try to be courteous to people in game", "Remember the people in the game are real people somewhere", "with real feelings.", "If you go around being abusive or causing trouble", "your character could quickly be the one in trouble"}) {
			public void finished() {
				ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new SingleEvent(owner, 1500) {
					public void action() {
						final String[] options14 = {"How can I communicate with other players?", "goodbye then"};
						owner.setBusy(false);
						owner.getActionSender().sendMenu(options14);
						owner.setMenuHandler(new MenuHandler(options14) {
							public void handleReply(final int option, final String reply) {
								owner.setBusy(true);
								for(Player informee : owner.getViewArea().getPlayersInView()) {
									informee.informOfChatMessage(new ChatMessage(owner, reply, npc));
								}
								switch(option) {
									case 0:
										howCommunicate(npc, owner, incStage);
										break;
									case 1:
										goodbye(npc, owner, incStage);
										break;
								}
								owner.setBusy(false);
								npc.unblock();
							}
						});
					}
				});
			}
		});
	}
	private void goodbye(final Npc npc, final Player owner, final boolean incStage) {
		ServerBootstrap.getDefaultInstance().getDelayedEventHandler().add(new DelayedQuestChat(npc, owner, new String[] {"Good luck"}) {
			public void finished() {
				if(incStage)
					owner.incQuestCompletionStage(100);
				owner.setBusy(false);
				npc.unblock();
			}
		});
	}
}